xxxx<- singstat_tidytable(14506, force_annual = TRUE)
View(xxxx)
View(rr)
rr <- singstat_tidytable(15808)
View(rr)
View(rr)
load_all()
rr <- singstat_tidytable(15808)
View(rr)
xxxx<- singstat_tidytable(14506, force_annual = TRUE)
View(xxxx)
document()
View(x)
View(x)
load_all()
document()
?singstat_tidytable
x <- singstat_tidytable(14506, force_annual = TRUE, na.rm = TRUE)
View(x)
View(x)
x <- singstat_tidytable(14506, force_annual = FALSE)
library(devtools)
check()
check()
library(devtools)
load_all()
singstat_resource("gdp")
singstat_metadata(16035)
singstat_tabledata(16035)
singstat_tidytable(16035)
x <- singstat_tidytable(16035)
view(x)
View(x)
library(singstatR)
head(singstat_tidytable(14506, print_info = FALSE, force_annual = FALSE))
head(singstat_tidytable(14506, print_info = FALSE, force_annual = TRUE, force_op = "sum", na.rm = TRUE))
singstat_resource("xxxxxx")
singstat_resource()
View(x)
library(dplyr)
names(x)
arrange(x, M015241.1.1.1_Manufacturing_Million Dollars)
arrange(x, "M015241.1.1.1_Manufacturing_Million Dollars")
arrange(x, M015241.1.1.1_Manufacturing_Million Dollars)
arrange(x, desc(M015241.1.1.1_Manufacturing_Million Dollars))
select(x, y = M015241.1.1.1_Manufacturing_Million Dollars)
iiris
iris
arrange(iris, Sepal.Length)
arrange(iris, desc(Sepal.Length))
arrange(iris, desc(Sepal.Length), Sepal.Width)
arrange(x, `M015241.1.1.1_Manufacturing_Million Dollars`)
y <- singstat_resource("xxx")
View(x)
View(x)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
try(singstat_resource("aaaaa"))
try(singstat_resource("aaaaa"), silent = TRUE)
y <- try(singstat_resource("aaaaa"), silent = TRUE)
class(y)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
y <- try(singstat_resource("gdp"), silent = TRUE)
y <- data.frame(x = NULL, y = NULL)
View(y)
View(y)
colnames(y)
y <- try(singstat_resource("gdp"), silent = TRUE)
z <- data.frame(x = NULL, y = NULL)
a <- rbind(y, z)
View(a)
View(a)
View(y)
View(y)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(full_results)
View(full_results)
full_results$gdp
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
full_results
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
resourceIDs <- c("gdp", "family")
full_results <- vector(mode = "list", length = length(resourceIDs))
str_full_results
resourceIDs <- c("gdp", "family")
full_results <- vector(mode = "list", length = length(resourceIDs))
str(full_results)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(x)
View(x)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(df)
View(df)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(df)
View(df)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(df)
View(df)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(df)
View(df)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
View(df)
View(df)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
r <- c("gdp", "xxx", "family")
s <- c("all", "xxx", "title")
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatch(expr = singstat_resource(keyword, searchOption = search_option),
error = function(cond) {
cat('The search query "', keyword, '" returned an error. No results for this query are included. ', sep = "")
cat("Here's the original error message:", as.character(cond), sep = "\n")
#Return empty df
return(data.frame(resourceId = NULL, title = NULL))
},
silent = TRUE
)
result <- result %>% dplyr::mutate(query = keyword)
#Fill list with results
full_results[[number]] <- result
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
}
singstat_search(r, s)
abc <- singstat_search(r, s)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(r, s)
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatch({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword, '" returned an error. No results for this query are included. ', sep = "")
cat("Here's the original error message:", as.character(cond), sep = "\n")
#Return empty df
return(data.frame(resourceId = NULL, title = NULL))
},
silent = TRUE
)
result <- result %>% dplyr::mutate(query = keyword)
}
#Fill list with results
full_results[[number]] <- result
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
rm(abc)
abc <- singstat_search(r, s)
View(abc)
View(result)
View(result)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(r, s)
View(abc)
View(abc)
rm(list = ls())
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatch({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword, '" returned an error. No results for this query are included. ', sep = "")
cat("Here's the original error message:", as.character(cond), sep = "\n")
#Return empty df
return(data.frame(resourceId = NULL, title = NULL))
},
silent = TRUE
)
result <- result %>% dplyr::mutate(query = keyword)
print(result)
}
#Fill list with results
full_results[[number]] <- result
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = "all, title")
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = c("all, title"))
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = c("all", "title"))
View(abc)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = c("all", "title"))
View(abc)
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "title"))
install.packages("tryCatchLog")
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "title"))
View(abc)
View(abc)
library(tryCatchLog)
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatchLog::tryCatchLog({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword,
'" returned an error. No results for this query are included. ', sep = ""
)
cat("Here's the original error message:", as.character(cond), sep = "\n")
}, include.full.call.stack = FALSE
)
source('C:/Users/Timothy/Desktop/test.R', echo=TRUE)
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "title"))
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatchLog::tryCatchLog({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword,
'" returned an error. No results for this query are included. ', sep = ""
)
cat("Here's the original error message:", as.character(cond), sep = "\n")
}, include.full.call.stack = FALSE, include.compact.call.stack = FALSE
)
result <- result %>% dplyr::mutate(query = keyword)
#Fill list with results
full_results[[number]] <- result
}
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "title"))
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatchLog::tryCatchLog({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword,
'" returned an error. No results for this query are included. ', sep = ""
)
cat("Here's the original error message:", as.character(cond), sep = "\n")
}, include.full.call.stack = FALSE, include.compact.call.stack = FALSE
return(data.frame(resourceId = NULL,
title = NULL))
)
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatchLog::tryCatchLog({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword,
'" returned an error. No results for this query are included. ', sep = ""
)
cat("Here's the original error message:", as.character(cond), sep = "\n")
}, include.full.call.stack = FALSE, include.compact.call.stack = FALSE
return(data.frame(resourceId = NULL,
title = NULL))
)
result <- result %>% dplyr::mutate(query = keyword)
#Fill list with results
full_results[[number]] <- result
}
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
singstat_search <- function(resourceIDs, search_options) {
full_results <- vector(mode = "list", length = length(resourceIDs))
for (number in seq_along(resourceIDs)) {
keyword <- resourceIDs[[number]]
search_option <- search_options[[number]]
#Use tryCatch() to deal with situations where singstat_resource would throw an error and stop the program
result <- tryCatchLog::tryCatchLog({singstat_resource(keyword, searchOption = search_option)},
error = function(cond) {
cat('The search query "', keyword,
'" returned an error. No results for this query are included. ', sep = ""
)
cat("Here's the original error message:", as.character(cond), sep = "\n")
return(data.frame(resourceId = NULL,
title = NULL))
}, include.full.call.stack = FALSE, include.compact.call.stack = FALSE
)
result <- result %>% dplyr::mutate(query = keyword)
#Fill list with results
full_results[[number]] <- result
}
#Bind into single dataframe
df <- data.table::rbindlist(full_results, fill = TRUE)
#Return results
df
}
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "title"))
View(abc)
View(abc)
abc <- singstat_search(resourceIDs = c("gdp", "xxx", "family"), search_options = c("all", "xxx", "all"))
View(abc)
View(abc)
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = "all")
devtools::load_all()
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = "all")
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = c("all", "all"))
View(abc)
library(devtools)
library(usethis)
use_package("tryCatchLog")
use_package("data.table")
load_all()
abc <- singstat_search(resourceIDs = c("gdp", "family"), search_options = "all")
View(abc)
View(abc)
abc <- singstat_search(resourceIDs = c("gdp", "government"), search_options = c("all", "all"))
check()
library(tidyr)
spread(abc, title, query)
def <- abc %>% dplyr::group_by(.data$resourceId) %>%
dplyr::summarise(dplyr::count())
starwars
library(dplyr)
starwars
def <- abc %>% dplyr::group_by(.data$resourceId) %>%
dplyr::summarise(dplyr::count())
def <- abc %>% count()
View(def)
View(def)
def <- abc %>% count(resourceId)
View(def)
View(def)
def <- abc %>% add_count(resourceId)
View(def)
View(def)
def <- abc %>% dplyr::group_by($resourceId) %>%
dplyr::summarise(dplyr::count())
def <- abc %>% dplyr::group_by(resourceId) %>%
dplyr::summarise(dplyr::count())
def <- abc %>% dplyr::group_by(.data$resourceId) %>%
dplyr::summarise(n())
unique(abc$resourceId)
def <- abc %>% dplyr::group_by(.data$resourceId, .data$title) %>%
dplyr::summarise(n())
View(def)
View(def)
unique(abc$query)
def %>% filter(.data$`n()` == length(unique(abc$query)))
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
load_all()
xxx <- singstat_search(keywords = c("gdp", "government"), search_options = c("all", "all"), search_type = "and")
?n
rm(xxx)
View(abc)
View(abc)
dplyr::spread(abc, key = resourceId, value = query)
tidyr::spread(abc, key = resourceId, value = query)
library(tidyr)
?row_number
?pivot_wider
tidyr::pivot_wider(abc)
tidyr::pivot_wider(abc, values_from = query)
efg <- mutate(efg, query1 = query)
efg <- mutate(abc, query1 = query)
tidyr::pivot_wider(abc, names_from = query, values_from = query1)
tidyr::pivot_wider(efg, names_from = query, values_from = query1)
xyz <- tidyr::pivot_wider(efg, names_from = query, values_from = query1)
View(xyz)
View(xyz)
document()
?singstat_search
load_all()
abc <- singstat_resource(keywords = c("gdp", "xxx", "government"), search_options = c("all", "some", "all"), search_type = "and")
load_all()
abc <- singstat_resource(keywords = c("gdp", "xxx", "government"), search_options = c("all", "some", "all"), search_type = "and")
abc <- singstat_search(keywords = c("gdp", "xxx", "government"), search_options = c("all", "some", "all"), search_type = "and")
View(abc)
View(abc)
abc <- singstat_search(keywords = c("gdp", "xxx", "government"), search_options = c("all", "some", "all"))
load_all()
abc <- singstat_search(keywords = c("gdp", "xxx", "government"), search_options = c("all", "some", "all"))
View(abc)
View(abc)
abc <- singstat_search(keywords = c("gdp", "growth", "government"), search_options = c("all", "title", "all"))
View(abc)
View(abc)
check()
document()
?singstat_search
document()
?singstat_search
document()
document()
?singstat_search
check()
use_test()
colnames(abc)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
check()
library(singstatR)
singstat_resource("gdp growth")
devtools::load_all()
singstat_resource("gdp growth")
singstat_search(keywords = c("gdp", "growth"), search_options = c("all", "all"), search_type = "and")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(singstatR)
x <- singstat_tabledata(16102, print_info = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(singstatR)
x <- singstat_tabledata(16102, print_info = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(singstatR)
x <- singstat_tabledata(16102, print_info = FALSE)
x <- singstat_tabledata(16102, print_info = FALSE)
x <- singstat_tabledata(16102, print_info = FALSE)
head(singstat_tidytable(16102, print_info = FALSE, variables = c("M060181.1.1", "M060181.1.2")))
head(singstat_tidytable(14506, print_info = FALSE, force_annual = FALSE))
library(devtools)
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(singstatR)
x <- singstat_tabledata(16102, print_info = FALSE)
y <- singstat_tidytable(16102, print_info = FALSE)
head(x)
head(y)
plot(y$year, y$`M060181.1.1_A  Current Account Balance_Million Dollars`,
type = "l",
xlab = "year",
ylab = "Current Account Balance (Million Dollars)")
head(singstat_tidytable(16102, print_info = FALSE, variables = c("M060181.1.1", "M060181.1.2")))
head(singstat_tidytable(14506, print_info = FALSE, force_annual = FALSE))
head(singstat_tidytable(14506, print_info = FALSE, force_annual = TRUE, force_op = "sum", na.rm = TRUE))
singstat_resource("gdp growth")
singstat_search(keywords = c("gdp", "growth"), search_options = c("all", "all"), search_type = "and")
singstat_search(keywords = c("gdp", "growth"), search_options = c("all", "all"), search_type = "or")
devtools::build_vignettes()
try(singstat_resource("gdp growth"))
try(singstat_resource("gdp growth"))
devtools::build_vignettes()
devtools::check()
'a' + 'a'
install.packages(c("coda", "mvtnorm"))
devtools::install_github("rmcelreath/rethinking")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
remove.packages("prettyunits")
devtools::install_github("rmcelreath/rethinking")
remove.packages("prettyunits")
